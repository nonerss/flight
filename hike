-- LocalScript inside FlyButton
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer

local button = script.Parent
local flying = false
local lv
local attach

-- Settings
local SPEED = 60
local ASCEND_SPEED = 40
local MAX_FORCE = 1e5

local moveInput = Vector3.new(0,0,0)
local ascend = 0
local keysDown = {}

-- Create flight physics
local function createLinearVelocity(hrp)
	attach = hrp:FindFirstChild("FlyAttachment")
	if not attach then
		attach = Instance.new("Attachment")
		attach.Name = "FlyAttachment"
		attach.Parent = hrp
		pcall(function()
			attach.WorldPosition = hrp.AssemblyCenterOfMass
		end)
	end

	lv = hrp:FindFirstChild("FlyLinearVelocity")
	if not lv then
		lv = Instance.new("LinearVelocity")
		lv.Name = "FlyLinearVelocity"
		lv.Parent = hrp
		lv.Attachment0 = attach
		lv.MaxForce = Vector3.new(MAX_FORCE, MAX_FORCE, MAX_FORCE)
		lv.RelativeTo = Enum.ActuatorRelativeTo.World
	end
end

-- Destroy flight physics
local function destroyLinearVelocity()
	if lv then lv:Destroy() end
	if attach then attach:Destroy() end
	lv, attach = nil, nil
end

-- Toggle fly
local function toggleFly()
	flying = not flying
	button.Text = flying and "Flying: ON" or "Flying: OFF"

	local char = player.Character
	local hrp = char and char:FindFirstChild("HumanoidRootPart")

	if flying and hrp then
		createLinearVelocity(hrp)
	else
		destroyLinearVelocity()
	end
end

-- Button click
button.MouseButton1Click:Connect(toggleFly)

-- Keyboard input
local UserInput = game:GetService("UserInputService")

local function refreshMoveVector()
	local forward = (keysDown.W and 1 or 0) - (keysDown.S and 1 or 0)
	local right = (keysDown.D and 1 or 0) - (keysDown.A and 1 or 0)
	moveInput = Vector3.new(right, 0, forward)
end

UserInput.InputBegan:Connect(function(input, gp)
	if gp then return end
	if input.UserInputType == Enum.UserInputType.Keyboard then
		if input.KeyCode == Enum.KeyCode.W then keysDown.W = true; refreshMoveVector() end
		if input.KeyCode == Enum.KeyCode.S then keysDown.S = true; refreshMoveVector() end
		if input.KeyCode == Enum.KeyCode.A then keysDown.A = true; refreshMoveVector() end
		if input.KeyCode == Enum.KeyCode.D then keysDown.D = true; refreshMoveVector() end
		if input.KeyCode == Enum.KeyCode.Space then ascend = 1 end
		if input.KeyCode == Enum.KeyCode.LeftShift then ascend = -1 end
	end
end)

UserInput.InputEnded:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.Keyboard then
		if input.KeyCode == Enum.KeyCode.W then keysDown.W = false; refreshMoveVector() end
		if input.KeyCode == Enum.KeyCode.S then keysDown.S = false; refreshMoveVector() end
		if input.KeyCode == Enum.KeyCode.A then keysDown.A = false; refreshMoveVector() end
		if input.KeyCode == Enum.KeyCode.D then keysDown.D = false; refreshMoveVector() end
		if input.KeyCode == Enum.KeyCode.Space then if ascend == 1 then ascend = 0 end end
		if input.KeyCode == Enum.KeyCode.LeftShift then if ascend == -1 then ascend = 0 end end
	end
end)

-- Flight loop
RunService.RenderStepped:Connect(function(dt)
	if not flying or not lv then return end
	local char = player.Character
	local hrp = char and char:FindFirstChild("HumanoidRootPart")
	local cam = workspace.CurrentCamera
	if not hrp or not cam then return end

	local camCFrame = cam.CFrame
	local forward = camCFrame.LookVector
	local right = camCFrame.RightVector

	local dir = (right * moveInput.X) + (forward * moveInput.Z)
	if dir.Magnitude > 0 then
		dir = dir.Unit
	end

	local target = (dir * SPEED) + Vector3.new(0, ascend * ASCEND_SPEED, 0)
	lv.VectorVelocity = target
end)
